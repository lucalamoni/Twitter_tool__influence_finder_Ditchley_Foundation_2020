import sys
import re

import pandas as pd

def clean_text(text):
    '''
    Function which uses regex on a piece of text to return only alphanumeric
    characters.

    Parameters
    ----------
    text : str
        The text string to be cleaned up.

    Returns
    -------
    cleaned_text : str
        The text with non-alphanumeric characters removed.
    '''
    cleaned_text = re.sub(r"http\S+", "", text) #remove urls
    cleaned_text=re.sub(r'\S+\.com\S+','',cleaned_text) #remove urls
    cleaned_text=re.sub(r'\@\w+','',cleaned_text) #remove mentions
    cleaned_text =re.sub(r'\#','',cleaned_text) #remove hashtags
    cleaned_text = re.findall(r'[A-Za-z]+',cleaned_text)
    cleaned_text = ' '.join(cleaned_text).lower()

    return cleaned_text

def twint_mentions_to_df(twint_df):
    '''
    Function to search through twint tweet data for user mentions
    and return a dataframe containing a tweet id and mentioned username
    in each row.
    
    Parameters
    ----------
    twint_df : Pandas DataFrame

    Returns
    -------
    tweet_mentions : Pandas DataFrame
        
    '''
    mentions = []
    temp_ids = twint_df['id'].values
    temp_mentions = twint_df['mentions'].values
    type(temp_mentions)
    for i in range(len(temp_ids)):
        temp_list = list(temp_mentions[i].strip('][').replace("'","").split(', '))
        for mention in temp_list:
            if len(mention)>0:
                mentions.append([temp_ids[i], mention])
            
    tweet_mentions = pd.DataFrame(mentions, columns=['tweet_id', 'mentions'])
    return tweet_mentions

############################################################################################################################
def mentions_to_df(df):
    '''
    Function to search through twint tweet data for user mentions
    and return a dataframe containing a tweet id and mentioned username
    in each row.
    
    Parameters
    ----------
    twint_df : Pandas DataFrame

    Returns
    -------
    tweet_mentions : Pandas DataFrame
    '''    
    
    mentions = []
    # if dataset == 'twint':
    #     temp_ids = df['id'].values
    # elif dataset == 'api':
    #     temp_ids = df['tweet_id'].values

    if hasattr(df, 'tweet_id'):
        temp_ids = df['tweet_id'].values
    elif hasattr(df, 'id'):
        temp_ids = df['id'].values
    else:
        print('What did you give me???')

    temp_mentions = df['mentions'].values
    
    for i in range(len(temp_ids)):
        #temp_list = list(temp_mentions[i].strip('][').replace("'","").split(', '))
        if isinstance(temp_mentions[i], str):
            temp_list = eval(temp_mentions[i])
        elif isinstance(temp_mentions[i], list):
            temp_list = temp_mentions[i]
        #temp_mentions = list(temp_mentions)
        #temp_list = [item.strip('[]').replace("'","").split(', ') for item in temp_mentions]
        
        for mention in temp_list:
            if len(mention)>0:
                mentions.append([temp_ids[i], mention])
                
    tweet_mentions = pd.DataFrame(mentions, columns=['tweet_id', 'mentions'])
    return tweet_mentions
    
    

############################################################################################################################

def init_cleaned_tweet_df(): 
    '''
    Initialise and return an empty dataframe with a standard, curated set of fields.

    Returns
    -------
    standard_df : Pandas DataFrame
        A dataframe containing tweets with a standardised set of fields.
    '''
    standard_df = pd.DataFrame(
        columns = [ 'user_id', 'screen_name', 'name', # Fields that identify user
                    'tweet_id', 'text', 'tweet_created_at', # Basic tweet info
                    'conversation_id', 'in_reply_to_status_id', 'rt_id', # ID fields that help identify interactions
                    'rt_user_id', 'rt_screen_name', 'rt_text', # Retweet Fields
                    'in_reply_to_user_id', 'in_reply_to_screen_name', # Reply information
                    'quoted_status_id', 'quoted_status', # Quote tweet info
                    'replies_count', 'retweet_count', 'like_count', # Engagement stats
                    'hashtags'])
    return standard_df


############################################################################################################################

def clean_twint_dataframe(twint_df):
    '''
    A function to take tweet data generated by twint and return
    a standardised dataframe with a consistent set of fields.

    Parameters
    ----------
    twint_df : Pandas DataFrame
        The twint tweet data to be processed and transferred.

    Returns
    -------
    standard_df : Pandas DataFrame
        A dataframe containing tweets with a standardised set of fields.
    '''
    standard_df = init_cleaned_tweet_df() # Initialise an empty dataframe
    # Merge columns with matching names
    standard_df = pd.concat([standard_df, twint_df[twint_df.columns.intersection(standard_df.columns)]], axis=0)
    # Clone columns with name mismatches
    standard_df['tweet_id'] = twint_df['id'] # tweet id
    standard_df['screen_name'] = twint_df['username'] # user twitter handle
    standard_df['tweet_created_at'] = twint_df['date'] + ' ' + twint_df['time'] # datetime of tweet creation
    standard_df['text'] = twint_df['tweet'] # the tweet contents
    standard_df['retweet_count'] = twint_df['retweets_count']
    standard_df['like_count'] = twint_df['likes_count']
    # Clean up fields that need cleaning
    standard_df['in_reply_to_user_id'] = twint_df['reply_to'].apply(lambda x : [user['user_id'] for user in eval(x)]) # convert reply_to into list of screen_names
    standard_df['in_reply_to_screen_name'] = twint_df['reply_to'].apply(lambda x : [user['username'] for user in eval(x)])
    standard_df['hashtags'] = standard_df['hashtags'].apply(lambda x : re.sub(r'\#','',x)) # remove hash symbol from hashtags list
    standard_df['quoted_status_id'] = twint_df['quote_url'].apply(lambda x : int(x.split('/')[-1]) if isinstance(x, str) else None) # get id of quoted tweet from url
    # Regularise some columns to lowercase
    standard_df['in_reply_to_screen_name'] = standard_df['in_reply_to_screen_name'].str.lower()
    standard_df['screen_name'] = standard_df['screen_name'].str.lower()
    standard_df['hashtags'] = standard_df['hashtags'].str.lower()
    
    return standard_df

############################################################################################################################

def clean_API_dataframe(API_df):
    '''
    A function to take tweet data generated by the twitter API and return
    a standardised dataframe with a consistent set of fields.

    Parameters
    ----------
    API_df : Pandas DataFrame
        The API tweet data to be processed and transferred.

    Returns
    -------
    standard_df : Pandas DataFrame
        A dataframe containing tweets with a standardised set of fields.
    '''
    # Initialise standardised dataframe
    standard_df = init_cleaned_tweet_df()
    # Automatically fill columns that have matching names already
    standard_df = pd.concat([standard_df, API_df[API_df.columns.intersection(standard_df.columns)]], axis=0)
    # Fill other desired columns where names dont match
    standard_df['like_count'] = API_df['favorite_count']

    # Set certain string columns to lowercase
    lowercase_list = ['in_reply_to_screen_name', 'screen_name', 'rt_screen_name', 'hashtags']
    for item in lowercase_list:
        standard_df[item] = standard_df[item].str.lower()

    to_clean_list = ['text', 'rt_text']
    for item in to_clean_list:
        standard_df[item] = standard_df[item].apply(lambda text : clean_text(text) if isinstance(text, str) else 'None')
    
    return standard_df

def populate_user_df(user_data):
    '''
    Take a series of tweepy user objects and transform them into a dataframe.
    
    Parameters
    ----------
    user_data : list
        List of tweepy.User objects 
    
    Returns
    -------
    user_df : Pandas DataFrame
        Cleaned dataframe with user data.
    '''
    df_fields = ['user_id', 'screen_name',  'name', 'location', 'user_description', 
              'user_friends_n', 'user_followers_n', 'prof_created_at', 'favourites_count', 
              'verified', 'statuses_count']
    
    API_fields = ['id', 'screen_name', 'name', 'location', 'description', 
                  'friends_count', 'followers_count', 'created_at', 'favourites_count',
                 'verified', 'statuses_count']
    # Go through tweepy user objects and pull relevant data into lists
    full_list = []
    for user in user_data:
        user_vars = vars(user)
        data_list = [user_vars[field] for field in API_fields]
        full_list.append(data_list)
    # Translate data list into dataframe
    user_df = pd.DataFrame(full_list, columns=df_fields)
    # Additional cleaning of data in dataframe
    user_df['screen_name'] = user_df['screen_name'].str.lower()
    user_df['user_description'] = user_df['user_description'].apply(lambda text : clean_text(text) if isinstance(text, str) else 'None')
    
    return user_df